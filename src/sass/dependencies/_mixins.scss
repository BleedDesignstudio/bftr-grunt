// BREAKPOINTS

$break: width;

@mixin break($b, $s: min, $a: width) {
	@media only screen and (#{$s}-#{$a}: $b) {
		@content;
	}
}

@mixin if-retina {
	@media
	(-webkit-min-device-pixel-ratio: 2),
	(min-resolution: 192dpi) {
		@content;
	}
}

// TYPOGRAPHY

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
	@each $fs-breakpoint, $fs-font-size in $fs-map {
		@if $fs-breakpoint == null {
			@include make-font-size($fs-font-size);
		}
		@else {
			@if map-has-key($fs-breakpoints, $fs-breakpoint) {
				$fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
			}
			@media screen and (min-width: $fs-breakpoint) {
				@include make-font-size($fs-font-size);
			}
		}
	}
}

@mixin make-font-size($fs-font-size) {
	@if type-of($fs-font-size) == "list" {
		font-size: nth($fs-font-size, 1);
		@if (length($fs-font-size) > 1) {
			line-height: nth($fs-font-size, 2);
		}
	}
	@else {
		font-size: $fs-font-size;
	}
}

@mixin webfont ($family, $file, $weight: "normal") {
	@font-face {
		font-family: $family;
		font-style: normal;
		font-weight: $weight;
			src: url('../../fonts/#{$file}.eot');
			src: url('../../fonts/#{$file}.eot?') format('eot'),
				 url('../../fonts/#{$file}.woff') format('woff'),
				 url('../../fonts/#{$file}.ttf')  format('truetype');
	}
}

// OTHER

@mixin calc($arg) {
	width: -webkit-calc(#{$arg});
	width: -moz-calc(#{$arg});
	width: -ms-calc(#{$arg});
	width: calc(#{$arg});
}

@mixin box-sizing($type) {
	-webkit-box-sizing: $type;
	-moz-box-sizing: $type;
	box-sizing: $type;
}

@mixin border-radius($amount) {
	-moz-border-radius: $amount;
	-webkit-border-radius: $amount;
	-o-border-radius: $amount;
	border-radius: $amount;
}

@mixin vertical-align {
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

@mixin animate($type, $speed, $ease) {
	-webkit-transition: $type $speed $ease;
	-moz-transition: $type $speed $ease;
	-o-transition: $type $speed $ease;
	transition: $type $speed $ease;
}

@mixin animateTransform($speed, $ease) {
	-webkit-transition: -webkit-transform $speed $ease;
	-moz-transition: -moz-transform $speed $ease;
	-o-transition: -o-transform $speed $ease;
	transition: transform $speed $ease;
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin gradient($deg, $c1, $c2, $p1:0%, $p2:100%) {
	background: -moz-linear-gradient($deg, $c1 $p1, $c2 $p2);
	background: -webkit-gradient(linear, left bottom, right top, color-stop($p1,$c1), color-stop($p2, $c2));
	background: -webkit-linear-gradient($deg, $c1 $p1, $c2 $p2);
	background: -o-linear-gradient($deg, $c1 $p1, $c2 $p2);
	background: -ms-linear-gradient($deg, $c1 $p1, $c2 $p2);
	background: linear-gradient($deg, $c1 $p1, $c2 $p2);
}

@mixin shadow($x, $y, $s, $b, $c) {
	-webkit-box-shadow:   $x $y $s $b $c;
	-moz-box-shadow:      $x $y $s $b $c;
	box-shadow:           $x $y $s $b $c;
}

@mixin grab {
	cursor: -webkit-grab;
	cursor: -moz-grab;

	&:active {
		cursor: -webkit-grabbing;
		cursor: -moz-grabbing;
	}

	-webkit-user-select: none;
	-moz-user-select: -moz-none;
	-webkit-user-select: none;
	-ms-user-select: none;
	user-select: none;

}

@mixin bftrdebug($t,$a: false) {
	@if $showDebug {
		background: $c-debug-one;
		div, span, section {
			background: $c-debug-one;
		}
	}
}

%clearfix {
	*zoom: 1;
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}
